jobs:
  build:
    runs-on: ${{ vars.RUNNER_DEV }}
    outputs:
      version: ${{ steps.source-info.outputs.version }}
      appversion: ${{ steps.source-info.outputs.appversion }}
      package-name: ${{ steps.source-info.outputs.package-name }}
      package-group: ${{ steps.source-info.outputs.package-group }}
      tipo-arquitetura: "java"
    #env necessária para setar qual cacerts estou usando no agente temporário. Quando aks estiver disponivel, verificar se ainda preciso dessa env
    env:
      JAVA_TOOL_OPTIONS: '-Djavax.net.ssl.trustStore=/opt/cacerts/cacerts'
      NODE_EXTRA_CA_CERTS: '/usr/local/share/ca-certificates/ca_all.crt'
      DOCKER_CA_CERTS: '/etc/docker/certs.d/bradesco_cadeias_docker/ca_all.crt'
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
 
      - name: Set up Maven
        uses: Bradesco-Actions/brad-maven-install@latest
        with:
          maven-version: 3.8.1
          maven-user: ${{ vars.G_NEXUS_SYS_USER }}
          maven-password: ${{ secrets.G_PASSWORD_SYS_NEXUS  }}
 
      - name: Setup Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
              "id": "nexus",
              "username": "${{ vars.G_NEXUS_SYS_USER }}",
              "password": "${{ secrets.G_PASSWORD_SYS_NEXUS }}"
            }]
          mirrors: |
            [{
              "id": "nexus",
              "name": "Central Repository",
              "mirrorOf": "central",
              "url": "https://${{ vars.ARTIFACT_REPOSITORY_URL }}/repository/${{ vars.VS_KEY }}-maven-central"
            }]
          path: './settings.xml'
          override: false
          githubserver: false
 
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
 
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven
          restore-keys: |
            ${{ runner.os }}-maven
 
      #esta action recupera as informações necessárias para o build, são elas:
      # version:
      # package-name:
      # package-group:
      # tipo-arquitetura:
      # imagem-base:
      - name: Recuperando informacoes do projeto
        id: source-info
        uses: Bradesco-Actions/retrieve-source-info-action@latest
        with:
          build-system: mvn
          vs-key: ${{ vars.VS_KEY }}
          artifact-repository-hostname: ${{ vars.ARTIFACT_REPOSITORY_URL}}
          type: ${{ inputs.artifact-type }}
 
      - name: Verifica pom.xml
        uses: Bradesco-Actions/brad-checkpom-action@latest
        with:
          user-sys-bamboo: ${{ vars.USER_SYS_BAMBOO }}
          password-sys-bamboo: ${{ secrets.PASSWORD_SYS_BAMBOO }}
 
      #realiza o build do artefato
      - name: Build artefato
        run: >
          mvn clean verify -Drelease=true -Dmaven.source.skip=true -f pom.xml -s ./settings.xml
 
      - name: Generate Project Key as per taxonomy
        if: ${{ inputs.enabled-sonar == 'true' }}
        run: |
          ORG_DOMAIN="br.com.bradesco"
          REPO_ID=${{ github.repository }}
          SONAR_PROJECT_KEY="${ORG_DOMAIN}.${REPO_ID/\//.}"
          printf '%s\n' "SONAR_PROJECT_KEY=${SONAR_PROJECT_KEY,,}" >> ${GITHUB_ENV}
          SONAR_PROJECT_NAME="${{ github.repository }}"
 
      - name: SonarQube Scan
        if: ${{ inputs.enabled-sonar == 'true' }}
        uses: sonarsource/sonarqube-scan-action@master
        env:
          JAVA_HOME: /opt/java/sonar_current
          JAVA_TOOL_OPTIONS: '-Djavax.net.ssl.trustStore=/opt/cacerts/cacerts'
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_ROOT_CERT: ${{ secrets.SONAR_CERT }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ github.repository }}
            -Dsonar.sources=src/main/java/
            -Dsonar.language=java
            -Dsonar.java.binaries=./target/classes
 
      - name: SonarQube Quality Gate check
        if: ${{ inputs.enabled-sonar == 'true' }}
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5  # Force to fail step after specific time.
        env:
          JAVA_HOME: /opt/java/sonar_current
          JAVA_TOOL_OPTIONS: '-Djavax.net.ssl.trustStore=/opt/cacerts/cacerts'
          SONAR_TOKEN: ${{ secrets.G_SONAR_TOKEN }}
          SONAR_ROOT_CERT: ${{ secrets.G_SONAR_CERT }}
 
      - name: Gera report SonarQube
        if: ${{ inputs.enabled-sonar == 'true' }}
        run: |
          echo "SONAR_RESULT=$(sed -n 's/dashboardUrl=\(.*\)/\1/p' .scannerwork/report-task.txt)" >> $GITHUB_ENV
          cat .scannerwork/report-task.txt
 
      #action responsável por fazer o upload do artefato gerado no artifacts do github
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.source-info.outputs.package-name }}
          path: ${{ github.workspace }}/target/${{ steps.source-info.outputs.package-name }}*.jar
          retention-days: 7
 
      - name: Upload Package to Nexus
        run: mvn clean deploy -Drelease=true -Dmaven.source.skip=true -Dmaven.test.skip=true -s settings.xml -f pom.xml
 
      - uses: Bradesco-Actions/summary.sh@main
        if: true
        with:
          script: |
            summary_addTitle 'Resumo da Execução'
            summary_beginTable 'Step' 'Status' 'Resultado'
            summary_addTableRow 'Versão da Aplicação' '✅' '${{ steps.source-info.outputs.appversion }}'
            if [ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "failure" ]; then
            summary_addTableRow 'SonarQube Quality Gate check' '❌' '${{ env.SONAR_RESULT }}'
            elif [ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "success" ]; then
            summary_addTableRow 'SonarQube Quality Gate check' '✅' '${{ env.SONAR_RESULT }}'
            elif [ "${{ steps.sonarqube-quality-gate-check.outcome }}" == "skipped" ]; then
            summary_addTableRow 'SonarQube Quality Gate check' '⏭️' 'Skipped'
            fi
            summary_endTable
 
  Dependecy-Check:
    runs-on: ${{ vars.RUNNER_DEV }}
    needs: build
    env:
      JAVA_TOOL_OPTIONS: '-Djavax.net.ssl.trustStore=/opt/cacerts/cacerts'
      NODE_EXTRA_CA_CERTS: '/usr/local/share/ca-certificates/ca_all.crt'
    if: ${{ inputs.enabled-dp_check == 'true' }}
    steps:
      - uses: actions/checkout@v4
 
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
          cache: maven
 
      - name: Set up Maven
        uses: Bradesco-Actions/brad-maven-install@latest
        with:
          maven-version: 3.8.1
          maven-user: ${{ vars.G_NEXUS_SYS_USER }}
          maven-password: ${{ secrets.G_PASSWORD_SYS_NEXUS  }}
 
      - name: Setup Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
              "id": "nexus",
              "username": "${{ vars.G_NEXUS_SYS_USER }}",
              "password": "${{ secrets.G_PASSWORD_SYS_NEXUS }}"
            }]
          mirrors: |
            [{
              "id": "nexus",
              "name": "Central Repository",
              "mirrorOf": "central",
              "url": "https://${{ vars.ARTIFACT_REPOSITORY_URL }}/repository/${{ vars.VS_KEY }}-maven-central"
            }]
          path: './settings.xml'
          override: false
          githubserver: false
 
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.1.2
        with:
          name: ${{ needs.build.outputs.package-name }}
          path: target
 
      - name: Dependency-Check
        uses: Bradesco-Actions/brad-dpcheck-action@latest
        with:
          vs-key: ${{ vars.VS_KEY }}
          package-name: ${{ needs.build.outputs.package-name }}
          version: ${{ needs.build.outputs.version }}
          artifact-repository-user: ${{ vars.G_NEXUS_SYS_USER }}
          artifact-repository-pass: ${{ secrets.G_PASSWORD_SYS_NEXUS }}
          artifact-repository-hostbase: ${{ vars.ARTIFACT_REPOSITORY_URL }}
          tipoDeploy: ${{ inputs.artifact-type }}
          arquitetura: "java"
          cplds-user: ${{ vars.USER_SYS_BAMBOO }}
          cplds-pass: ${{ secrets.PASSWORD_SYS_BAMBOO }}
        continue-on-error: true
 
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/reports
          retention-days: 7
        if: ${{ always() && steps.dpcheck.conclusion != 'skipped'}}
 
  Fortify-Scan:
    runs-on: ${{ vars.RUNNER_DEV }}
    if: ${{ inputs.enabled-fortify == 'true' }}
    env:
      JAVA_TOOL_OPTIONS: '-Djavax.net.ssl.trustStore=/opt/cacerts/cacerts'
      NODE_EXTRA_CA_CERTS: '/usr/local/share/ca-certificates/ca_all.crt'
      DOCKER_CA_CERTS: '/etc/docker/certs.d/bradesco_cadeias_docker/ca_all.crt'
    steps:
      - uses: actions/checkout@v4
 
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
          cache: maven
 
      - name: Set up Maven
        uses: Bradesco-Actions/brad-maven-install@latest
        with:
          maven-version: 3.8.1
          maven-user: ${{ vars.G_NEXUS_SYS_USER }}
          maven-password: ${{ secrets.G_PASSWORD_SYS_NEXUS  }}
 
      - name: Setup Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
              "id": "nexus",
              "username": "${{ vars.G_NEXUS_SYS_USER }}",
              "password": "${{ secrets.G_PASSWORD_SYS_NEXUS }}"
            }]
          mirrors: |
            [{
              "id": "nexus",
              "name": "Central Repository",
              "mirrorOf": "central",
              "url": "https://${{ vars.ARTIFACT_REPOSITORY_URL }}/repository/${{ vars.VS_KEY }}-maven-central"
            }]
          path: './settings.xml'
          override: false
          githubserver: false
 
      - name: Recuperando informacoes do projeto
        id: source-info
        uses: Bradesco-Actions/retrieve-source-info-action@latest
        with:
          build-system: mvn
          vs-key: ${{ vars.VS_KEY }}
          artifact-repository-hostname: ${{ vars.ARTIFACT_REPOSITORY_URL}}
          type: ${{ inputs.artifact-type }}
 
      - name: Execute fortify
        uses: Bradesco-Actions/brad-fortify-action@latest
        with:
          vs-key: ${{ vars.VS_KEY }}
          version: ${{ steps.source-info.outputs.version }}
          package-name: ${{ steps.source-info.outputs.package-name }}
          package-owner: ${{ steps.source-info.outputs.package-group }}
          cplds-user: ${{ vars.USER_SYS_BAMBOO }}
          cplds-pass: ${{ secrets.PASSWORD_SYS_BAMBOO }}
          code-arch: "java"
          artifact-repository-user: ${{ vars.G_NEXUS_SYS_USER }}
          artifact-repository-pass: ${{ secrets.G_PASSWORD_SYS_NEXUS }}
          artifact-repository-host-port: ${{ vars.ARTIFACT_REPOSITORY_URL }}
          artifact-repository-build-system: maven # TODO:High use the same enum as retrieve source action
          artifact-repository-deploy-type: ${{ inputs.artifact-type }}
          fortify-analysis-download-token: ${{ secrets.G_FORTIFYANALYSISDOWNLOADTOKENPASSWORD }}
          fortify-analysis-upload-token: ${{ secrets.G_FORTIFYANALYSISUPLOADTOKENPASSWORD }}
          fortify-controller-token: ${{ secrets.G_FORTIFYCONTROLLERTOKENPASSWORD }}
          fortify-unified-login-token: ${{ secrets.G_FORTIFYUNIFIEDLOGINTOKENPASSWORD }}
          fortify-pool-id: ${{ vars.FORTIFY_POOL_ID_LEAP }}